% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_func.R
\name{ssnbayes}
\alias{ssnbayes}
\title{Fits a mixed regression model using Stan
It requires the same number of observation/locations per day.
It requires location id (locID) and points id (pid).
The locID are unique for each site.
The pid is unique for each observation.
Missing values are allowed in the response but not in the covariates.}
\usage{
ssnbayes(
  formula = formula,
  data = data,
  path = path,
  TempModel = "ar",
  CorModels = "Exponential.tailup",
  iter = 3000,
  warmup = 1500,
  chains = 3,
  refresh = max(iter/100, 1),
  net = 1,
  addfunccol = addfunccol,
  loglik = F,
  ssn_object = T
)
}
\arguments{
\item{formula}{A formula as in lm()}

\item{data}{A data.frame containing the locations, dates, covariates and the response variable}

\item{path}{Path with the name of the SSN object}

\item{TempModel}{Temporal structure (ar = Autorregressive; var = Vector autorregression)}

\item{CorModels}{Spatial correlation structure}

\item{iter}{Number of iterations}

\item{warmup}{Warm up samples}

\item{chains}{Number of chains}

\item{refresh}{Sampler refreshing rate}

\item{net}{The network id (optional). Used when the SSN object cotains multiple networks.}

\item{addfunccol}{Variable to compute the additive function. Used to compute the spatial weights.}

\item{loglik}{Logic parameter denoting if the loglik will be computed by the model.}

\item{ssn_object}{Logic parameter denoting if the SSN objects is available. If not, only Euclidean distance models are used.}
}
\value{
A list with the fit
}
\description{
Fits a mixed regression model using Stan
It requires the same number of observation/locations per day.
It requires location id (locID) and points id (pid).
The locID are unique for each site.
The pid is unique for each observation.
Missing values are allowed in the response but not in the covariates.
}
\examples{
#fit_td <- ssnbayes(formula = 'y ~ X1 + X2 + X3',
#                    data = data, ssn = ssn,
#                    CorModels = "Exponential.taildown",
#                    iter = 3000,
#                    warmup = 1500,
#                    chains = 3)
}
